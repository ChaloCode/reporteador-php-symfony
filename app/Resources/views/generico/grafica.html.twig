
{% block stylesheetsGrafica %}    
<style>
.margen{
    margin-top: 2px;
    margin-bottom: 8px;
}
</style>
{% endblock %}
{% block bodyGrafica %} 
     {% embed "generico/ventana.html.twig" %}                
                {% block tituloVentana %}{{info['grafica'].titulo}}{% endblock %} 
                {% block subTituloVentana %}{{info['grafica'].subtitulo}}{% endblock %}
                 {% block bodyLink %}
                    <li><a  class="fa fa-bar-chart" id="BarraLink" onclick="Barra()"> Grafica, Barra</a></li>  
                    <li><a  class="fa fa-line-chart" id="LineaLink" onclick="Linea()"> Grafica, Linea</a></li>                    
                    <li><a  class="fa fa-area-chart" id="AreaLink" onclick="Area()"> Grafica, Area</a></li>                    
                    <li><a  class="fa fa-pie-chart" id="DonutLink" onclick="Donut()"> Grafica, Donut</a></li>
                 {% endblock %}                           
                {% block bodyVentana %} 
                             
                    <div class="row">
                        <div class="col-md-6">
                            <p>Seleccione valores para el <strong>eje horizontal</strong></p>
                                <select id='grafica-x' class="margen">
                                    {% for i in infoTabla['columnas'] %}
                                        <option value="{{ loop.index0 }}">{{i}}</option>               
                                    {% endfor %}
                                </select> 
                            <p>Seleccione valores para el <strong>eje vertical</strong></p>
                            <select id='grafica-y' class="margen">
                                {% for i in infoTabla['columnas'] %}
                                    <option value="{{ loop.index0 }}">{{i}}</option>               
                                {% endfor %}
                            </select>
                        </div>
                        <div id='divSeries' class="col-md-6">
                            <p>Seleccione valores para agregar una <strong>nueva serie</strong></p>
                            <select id='grafica-serie' class="margen ">
                                {% for i in infoTabla['columnas'] %}
                                    <option value="{{ loop.index0 }}">{{i}}</option>               
                                {% endfor %}
                            </select> 
                            <button  id="addSerie" class="btn btn-success">Agregar</button>
                        </div>
                        </div> 
                        <div class="ln_solid"></div>                
                        <div id="tap-grafica" class="scroll" >                              
                            <div id="Graficar" >
                        </div>
                    </div>
                    
               {% endblock %}
        {% endembed %}          
{% endblock %}
{% block javascriptsGrafica %}  
   <!-- moris js -->  
  <script src='{{ asset("js/moris/raphael-min.js")}}'></script>
  <script src='{{ asset("js/moris/morris.min.js")}}'></script>
  
  <script type="text/javascript">
   var datax;
   var dataAll = {        
    {% for i in 0..infoTabla['lengthFilas']   %}   
    "{{i}}" :{        
                {% for j in 0..infoTabla['lengthColumnas']  %}   
                    "{{j}}": "{{infoTabla['filas'][i][j]}}",
                {% endfor %}      
            },    
    {% endfor %}     
    };
  
  $("#grafica-x").change(function() {
      cargarGrafica(); 
  });
  
  $("#grafica-y").change(function() {
        cargarGrafica();
  }); 
  
  
  var ykeys_temp= ['valor']; 
  var labels_serie_temp= ['Valor']; 
  var oldSerie=[];
  var numSerie=1;
  $("#addSerie").click(function() {       
        var xx=$("#grafica-x").val();
        var yy=$("#grafica-y").val();  
        var serie=$("#grafica-serie").val();        
          
        if(xx!=serie && yy!=serie)
        {           
            if( ykeys_temp.indexOf('valor'+serie)<0)
            {
                addSeries(serie,xx,yy);
            }
            else{
                Alerta('Error','Esta serie ya se encuentra graficada.\nSeleccione otra serie para continuar.','error');
                //alert('Esta serie ya se encuentra graficada.\nSeleccione otra serie para continuar.');
            }
        }
        else{
               Alerta('Error','Esta serie ya se encuentra seleccionada, en uno de los ejes de la gráfica.\nSeleccione otra serie para continuar.','error');
               //alert('Esta serie ya se encuentra seleccionada, en uno de los ejes de la gráfica.\nSeleccione otra serie para continuar.');
        }
        
        
  });
  
  function addSeries(serie,xx,yy)
  {
     
        var valuex='valor'+serie;
        ykeys_temp.push(valuex);
        
        var labels_serie = 'Serie '+numSerie+', '+$("#grafica-serie option:selected").html();
        labels_serie_temp.push(labels_serie);
        numSerie++;
      
    
        var data2 = {
            'datax': []       
        };
        
        var oldSerieTemp=[];             
        var oldSerieLength=oldSerie.length-1;       
        var text;
       
        var control=true;
        for (i=0;i<{{infoTabla['lengthFilas']}};i++)
        {         
            var n=dataAll[i][serie];
            if(n==0){
                n++;
            }
            n=n/n;
            if( Number.isInteger(n))
            {
                var serieNew='"'+valuex+'":'+dataAll[i][serie];
                var label='"label":'+dataAll[i][xx];
                var valor='"valor":'+dataAll[i][yy];
                var value='"value":'+dataAll[i][yy];
                
                if(oldSerieLength>0)
                { 
                    var textTemp = '{ '+serieNew+','+label+','+valor+','+value;
                    for (k=0;k<oldSerieLength;k++)
                    {           
                       textTemp = textTemp+','+oldSerie[k];   
                    }
                    textTemp =textTemp+'}';  
                    text=textTemp;
                }
                else{
                     text = '{ '+serieNew+','+label+','+valor+','+value+'}';    
                }
                try {
                    var myobj = JSON.parse(text);
                    data2.datax.push(myobj);
                    //Global de las series selecionada                
                    oldSerieTemp.push(serieNew);
                }
                catch(err) {
                    control=false;
                    ykeys_temp.pop(); 
                    labels_serie_temp.pop(); 
                    numSerie--;                    
                    Alerta('Error','Lo sentimos :<big>'+ labels_serie +'</big> no se pudo graficar.\nRecomendaciones:\n*Vuelva intentarlo.\n*Revise la información que sea coherente con los ejes graficados.','error');
                    break;
                }
                
                
            }
            else
            {
                control=false;
                ykeys_temp.pop(); 
                labels_serie_temp.pop(); 
                numSerie--;
                Alerta('Error','Seleccione una serie, que solo contenga valores numéricos.','error');
                //alert('Seleccione una serie, que solo contenga valores numéricos.');
                break;
            }         
        }      
       if(control)
       {
            if(oldSerieLength>0)
            { 
                 oldSerie+=','+ oldSerieTemp;
            }
            else{
                 oldSerie+= oldSerieTemp;
            }  
             oldSerie = oldSerie.split(',');
             datax=data2.datax; 
             Barra();
       }
  }
    
  function cargarGrafica()
  {
        //Reset de series previamnete cargadas
        ykeys_temp= ['valor']; 
        labels_serie_temp= ['Valor']; 
        oldSerie=[];
        numSerie=1;
        
        var xx=$("#grafica-x").val();
        var yy=$("#grafica-y").val();
        var data2 = {
            'datax': []       
        };
        var control2=true;
        for (i=0;i<{{infoTabla['lengthFilas']+1}};i++)
        {
            var n=dataAll[i][xx];
            if(n==0){
                n++;
            }
            n=n/n;
            var n2=dataAll[i][yy];            
            if(n2==0){
                n2++;
            }
            n2=n2/n2;
            if(control2)
            {
                if( !Number.isInteger(n) || !Number.isInteger(n2) )
                {    
                    control2=false;
                    if( !Number.isInteger(n2) ){
                         Alerta('Error','En el eje vertical, solo puede contener valores numéricos.\nSeleccione otro valor para continuar.','error');
                    }
                }
            }
           
            data2.datax.push({ 'label':dataAll[i][xx]
                                ,'valor':dataAll[i][yy]
                                ,'value':dataAll[i][yy]
                             });
        }  
         datax=data2.datax;
        if(!control2)
        {           
            Alerta('Advertencia','A seleccionado un eje, que NO contiene valores numéricos.\nEsto le impide agregar series mas adelante.','success') ;
            Barra(true);
        }
        else{              
             Barra(false);        
        }    
       
        
  }
  

  function ResetTapGrafica(inabilitar=false)
  {
      $('#Graficar').remove();
      $('#tap-grafica').append( '<div id="Graficar" ></div>' );
      if(inabilitar)
      {
          $("#divSeries").children().prop('disabled',true);
      }
      else{
          $("#divSeries").children().prop('disabled',false);
      }
  }
  function Linea()
  {     
       ResetTapGrafica();
       Morris.Line({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            // Chart data records -- each entry in this array corresponds to a point on
            // the chart.
            data: datax,
            // The name of the data record attribute that contains x-values.
            xkey: 'label',
            //Para eliminar el calculo de fecha
            parseTime: false,
            // A list of names of data record attributes that contain y-values.
            ykeys: ykeys_temp,          
            // Labels for the ykeys -- will be displayed when you hover over the
            // chart.           
            labels: labels_serie_temp
            
            
            });
  }
  
  function Area()
  {      
      ResetTapGrafica();
     //$('#AreaLink').removeAttr('onclick');
      Morris.Area({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            // Chart data records -- each entry in this array corresponds to a point on
            // the chart.
            data: datax,
            // The name of the data record attribute that contains x-values.
            xkey: 'label',
            //Para eliminar el calculo de fecha
            parseTime: false,
            // A list of names of data record attributes that contain y-values.
            ykeys: ykeys_temp,
            // Labels for the ykeys -- will be displayed when you hover over the
            // chart.
            labels: labels_serie_temp
            });
  }
  
  function Barra(a=false)
  {  
       ResetTapGrafica(a);
       Morris.Bar({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            // Chart data records -- each entry in this array corresponds to a point on
            // the chart.
            data: datax,
            // The name of the data record attribute that contains x-values.
            xkey: 'label',
            // A list of names of data record attributes that contain y-values.
            ykeys: ykeys_temp,
            // Labels for the ykeys -- will be displayed when you hover over the
            // chart.
            labels: labels_serie_temp
            });
  }
  
  function Donut()
  {       
         Alerta('Advertencia','La gráfica Donut, solo muestra información de los ejes horizontal y vertical.','success') ;
         ResetTapGrafica(true);
         Morris.Donut({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            data: datax, 
            /*                   
            formatter: function (y) {
                return y + "%"
            }
            */
      });
  }
      //Linea();
        //Area();
      // Barra();
       // Donut();
       cargarGrafica();
  </script>
{% endblock %}
