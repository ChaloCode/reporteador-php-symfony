
{% block stylesheetsGrafica %}    
{% endblock %}
{% block bodyGrafica %} 
     {% embed "generico/ventana.html.twig" %}                
                {% block tituloVentana %}{{info['grafica'].titulo}}{% endblock %} 
                {% block subTituloVentana %}{{info['grafica'].subtitulo}}{% endblock %}
                 {% block bodyLink %}
                    <li><a  class="fa fa-bar-chart" id="BarraLink" onclick="Barra()"> Grafica, Barra</a></li>  
                    <li><a  class="fa fa-line-chart" id="LineaLink" onclick="Linea()"> Grafica, Linea</a></li>                    
                    <li><a  class="fa fa-area-chart" id="AreaLink" onclick="Area()"> Grafica, Area</a></li>                    
                    <li><a  class="fa fa-pie-chart" id="DonutLink" onclick="Donut()"> Grafica, Donut</a></li>
                 {% endblock %}                           
                {% block bodyVentana %}                 
                    <div>
                        <p>Seleccione valores para el <strong>eje horizontal</strong></p>
                        <select id='grafica-x'>
                            {% for i in infoTabla['columnas'] %}
                                <option value="{{ loop.index0 }}">{{i}}</option>               
                            {% endfor %}
                        </select> 
                        <p>Seleccione valores para el <strong>eje vertical</strong></p>
                        <select id='grafica-y'>
                            {% for i in infoTabla['columnas'] %}
                                <option value="{{ loop.index0 }}">{{i}}</option>               
                            {% endfor %}
                        </select>
                        <div class="ln_solid"></div> 
                        <p>Seleccione valores para agregar una <strong>nueva serie</strong></p>
                        <select id='grafica-serie'>
                            {% for i in infoTabla['columnas'] %}
                                <option value="{{ loop.index0 }}">{{i}}</option>               
                            {% endfor %}
                        </select> 
                         <button  id="addSerie" class="btn btn-success">Agregar</button>
                    </div>                
                    <div id="tap-grafica" >                              
                        <div id="Graficar" ></div>
                    </div>
               {% endblock %}
        {% endembed %}          
{% endblock %}
{% block javascriptsGrafica %}  
   <!-- moris js -->  
  <script src='{{ asset("js/moris/raphael-min.js")}}'></script>
  <script src='{{ asset("js/moris/morris.min.js")}}'></script>
  
  <script type="text/javascript">
   var datax;
   var dataAll = {        
    {% for i in 0..infoTabla['lengthFilas']   %}   
    "{{i}}" :{        
                {% for j in 0..infoTabla['lengthColumnas']  %}   
                    "{{j}}": "{{infoTabla['filas'][i][j]}}",
                {% endfor %}      
            },    
    {% endfor %}     
    };
  
  $("#grafica-x").change(function() {
      cargarGrafica();     
  });
  
  $("#grafica-y").change(function() {
        cargarGrafica();
  });
  
  
  var ykeys_temp= ['valor']; 
  var oldSerie=[];
  $("#addSerie").click(function() {       
        var serie=$("#grafica-serie").val();
        var valuex='valor'+serie;
        ykeys_temp.push(valuex);
        var data2 = {
            'datax': []       
        };
        
         
        // console.log(ykeys_temp);
        var xx=$("#grafica-x").val();
        var yy=$("#grafica-y").val();
        
        var oldSerieTemp=[];             
        var oldSerieLength=oldSerie.length-1;
        var text;
       
        var control=true;
        for (i=0;i<{{infoTabla['lengthFilas']}};i++)
        {         
            var n=dataAll[i][serie];
            n=n/n;
            if( Number.isInteger(n))
            {
                var serieNew='"'+valuex+'":'+dataAll[i][serie];
                var label='"label":'+dataAll[i][xx];
                var valor='"valor":'+dataAll[i][yy];
                var value='"value":'+dataAll[i][yy];
                if(oldSerieLength>0)
                { 
                    var textTemp = '{ '+serieNew+','+label+','+valor+','+value;
                    for (k=0;k<oldSerieLength;k++)
                    {   
                        //console.log(oldSerie[k]);  
                       // var lll=oldSerie[k];              
                       textTemp = textTemp+','+oldSerie[k];
                       // console.log(textTemp);
                    }
                    textTemp =textTemp+'}';
                   // console.log(textTemp);
                    text=textTemp;
                }
                else{
                     text = '{ '+serieNew+','+label+','+valor+','+value+'}';
                }
              
                var myobj = JSON.parse(text);
                data2.datax.push(myobj);
                //Global de las series selecionada                
                oldSerieTemp.push(serieNew);
                
            }
            else
            {
                control=false;
                ykeys_temp.pop(); 
                alert('Seleccione una serie, que solo contenga valores numÃ©ricos.');
                break;
            }
           
         
        }      
       if(control)
       {
            if(oldSerieLength>0)
            { 
                 oldSerie+=','+ oldSerieTemp;
            }
            else{
                 oldSerie+= oldSerieTemp;
            }
           
            // console.log(oldSerie);
             oldSerie = oldSerie.split(','); 
            // console.log(oldSerie[0]); 
             // console.log(oldSerie[1]); 
           // console.log(data2);
           
             datax=data2.datax;
             console.log(ykeys_temp);
             console.log(datax);
            
           Barra();
    
       }
    
        
  });
    
  function cargarGrafica()
  {
        var xx=$("#grafica-x").val();
        var yy=$("#grafica-y").val();
        var data2 = {
            'datax': []       
        };
        for (i=0;i<{{infoTabla['lengthFilas']}};i++)
        {
            data2.datax.push({ 'label':dataAll[i][xx]
                                ,'valor':dataAll[i][yy]
                                ,'value':dataAll[i][yy]
                             });
        }      
        datax=data2.datax;
        Barra();
  }

  function ResetTapGrafica()
  {
      $('#Graficar').remove();
      $('#tap-grafica').append( '<div id="Graficar" ></div>' );
  }
  function Linea()
  {     
       ResetTapGrafica()
       Morris.Line({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            // Chart data records -- each entry in this array corresponds to a point on
            // the chart.
            data: datax,
            // The name of the data record attribute that contains x-values.
            xkey: 'label',
            // A list of names of data record attributes that contain y-values.
            ykeys: ykeys_temp,          
            // Labels for the ykeys -- will be displayed when you hover over the
            // chart.           
            labels: ykeys_temp
            
            
            });
  }
  
  function Area()
  {
      ResetTapGrafica()
     //$('#AreaLink').removeAttr('onclick');
      Morris.Area({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            // Chart data records -- each entry in this array corresponds to a point on
            // the chart.
            data: datax,
            // The name of the data record attribute that contains x-values.
            xkey: 'label',
            // A list of names of data record attributes that contain y-values.
            ykeys: ykeys_temp,
            // Labels for the ykeys -- will be displayed when you hover over the
            // chart.
            labels: ykeys_temp
            });
  }
  
  function Barra()
  {
       ResetTapGrafica()
       Morris.Bar({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            // Chart data records -- each entry in this array corresponds to a point on
            // the chart.
            data: datax,
            // The name of the data record attribute that contains x-values.
            xkey: 'label',
            // A list of names of data record attributes that contain y-values.
            ykeys: ykeys_temp,
            // Labels for the ykeys -- will be displayed when you hover over the
            // chart.
            labels: ykeys_temp
            });
  }
  
  function Donut()
  {
         ResetTapGrafica()
         Morris.Donut({
            // ID of the element in which to draw the chart.
            element: 'Graficar',
            data: datax,                    
            formatter: function (y) {
                return y + "%"
            }
      });
  }
      //Linea();
        //Area();
      // Barra();
       // Donut();
       cargarGrafica();
  </script>
{% endblock %}
